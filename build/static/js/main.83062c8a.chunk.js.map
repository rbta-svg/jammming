{"version":3,"sources":["util/Spotify/Spotify.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/SearchBar/SearchBar.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Track","props","addTrack","bind","removeTrack","this","isRemoval","className","onClick","onAdd","track","onRemove","name","artist","album","renderAction","React","Component","TrackList","tracks","map","key","id","SearchResults","searchResults","SearchBar","state","searchTerm","search","handleTermChange","onSearch","console","log","e","setState","target","value","stateMatchUrlBar","window","location","href","match","restoredSearchTerm","replace","document","getElementById","placeholder","onChange","Playlist","changeHandler","playlistName","playlistTracks","onSave","clientID","Spotify","getAccessToken","expiresIn","urlInBrowser","accessTokenMatch","expiresInMatch","setTimeout","history","pushState","fetch","headers","then","response","ok","json","Error","responseJson","items","artists","uri","savePlaylist","playlistURIs","userID","method","body","JSON","stringify","playlistResponse","playlistResponseJson","uris","alert","App","changePlaylistName","isInPlaylistTracks","forEach","trackObj","newObjArray","filter","trackURIs","resolvedPromise","Boolean","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83062c8a.chunk.js","sourcesContent":["let accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://rob-frocio.surge.sh'\n\nlet Spotify = {\n    getAccessToken(searchTerm) {\n        if (accessToken) {\n            return accessToken;\n        }\n        else {  \n            let urlInBrowser = window.location.href;\n            let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n            let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n            let expiresIn;\n\n            if (accessTokenMatch) {\n                accessToken = accessTokenMatch[1];\n                expiresIn = expiresInMatch[1];\n\n                window.setTimeout(() => accessToken = '', expiresIn * 1000);\n                window.history.pushState('Access Token', null, '/');\n\n                console.log('Auth token successfully captured!')\n                return accessToken;\n            }\n\n            else {\n                if(searchTerm) {\n                    window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}&state=${searchTerm}`;\n                } else {\n                    window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`\n                }\n                console.log('Redirecting to Spotify auth screen');\n            }\n        }\n    },\n\n    search(searchTerm) {\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n            {\n                headers: { 'Authorization': `Bearer ${this.getAccessToken(searchTerm)}` }\n            })\n            .then(response => {\n\n                if (response.ok) {\n                    console.log('Successfully got a response for the track fetching')\n                    return response.json();\n                }\n                else {\n                    throw (new Error('Something has gone wrong while fetching the tracks'));\n                }\n            })\n            .then(responseJson => {\n        \n                return responseJson.tracks.items.map(track => {\n\n                    let fetchedTrackObj = {\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        uri: track.uri\n                    }\n                    return fetchedTrackObj;\n                })\n            })\n    },\n\n    savePlaylist(playlistName, playlistURIs) {\n\n        if (playlistURIs && playlistName) {\n            let accessTokenVar;\n            if (accessToken) {\n                accessTokenVar = accessToken\n            } else {\n                this.getAccessToken();\n                accessTokenVar = accessToken;\n            }\n            let userID;\n\n            return fetch('https://api.spotify.com/v1/me',\n                {\n                    headers: { 'Authorization': `Bearer ${this.getAccessToken()}` }\n                })\n                \n                .then(response => {\n                    return response.json();\n                })\n                \n                .then(responseJson => {\n                    userID = responseJson.id;\n                    console.log(`Fetched UserID: ${userID}`);\n                })\n                \n                .then( () => {\n                return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${this.getAccessToken()}`,\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        name: playlistName\n\n                    }),\n                })})\n\n                .then(playlistResponse => {\n                    return playlistResponse.json();\n                })\n\n                .then(playlistResponseJson => {\n                    \n                    fetch(`https://api.spotify.com/v1/playlists/${playlistResponseJson.id}/tracks`,\n                        {\n                            method: 'POST',\n                            headers: {\n                                'Authorization': `Bearer ${this.getAccessToken()}`,\n                                'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify({\n                                uris: playlistURIs,\n                            })\n                        })\n                })\n\n        } \n\n        else {\n            alert('Missing playlist name or playlist is empty.');\n        }\n    }\n}\n\nexport default Spotify;\n\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction() {\n\n        if(this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\n        }\n        \n        else if(!this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n        }\n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n\n    }\n\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>)\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    \n    render() {\n        return (\n            <div className=\"TrackList\">\n                {this.props.tracks.map(track => {\n                    return <Track \n                    track={track} \n                    key={track.id} \n                    onAdd={this.props.onAdd} \n                    onRemove={this.props.onRemove} \n                    isRemoval ={this.props.isRemoval}/>\n                })}\n            </div>)\n    }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Risultati ricerca</h2>\n                <TrackList tracks={this.props.searchResults} \n                onAdd={this.props.onAdd} \n                isRemoval={false} />\n            </div>)\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { searchTerm: '' };\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.searchTerm);\n        console.log(this.state.searchTerm);\n\n    }\n\n    handleTermChange(e) {\n        this.setState({ searchTerm: e.target.value });\n    }\n\n    componentDidMount() {\n        let webUrl = window.location.href;\n        let stateMatchUrlBar = webUrl.match(/state=([^&]*)/);\n\n        if (stateMatchUrlBar) {\n            let restoredSearchTerm = stateMatchUrlBar[1].replace(/%20/g, ' ');\n            document.getElementById('search').value = restoredSearchTerm;\n            this.setState( {searchTerm: restoredSearchTerm} );\n            this.props.onSearch(restoredSearchTerm);\n        }\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input\n                    id=\"search\"\n                    placeholder=\"Inserisci la canzone da cercare\"\n                    onChange={this.handleTermChange}\n                />\n\n                <button\n                    className=\"SearchButton\"\n                    onClick={this.search}\n                > CERCA </button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\n\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.changeHandler = this.changeHandler.bind(this);\n    }\n\n    changeHandler(e) {\n        this.props.onChange(e.target.value);\n    }\n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                \n                <input \n                value={this.props.playlistName} \n                onChange={this.changeHandler}/>\n\n                <TrackList \n                tracks={this.props.playlistTracks} \n                onRemove={this.props.onRemove} \n                isRemoval={true}/>\n                    \n                <button \n                className=\"Playlist-save\" \n                onClick={this.props.onSave}>\n                CREA LA PLAYLIST\n                </button>\n\n            </div>)\n    }\n}\n\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchResults from '../SearchResults/SearchResults';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '/Users/roberttiu/Progetti/jammming/src/util/Spotify/Spotify.js';\n\nclass App extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n\n      searchResults: [],\n\n      playlistName: 'Nome della tua playlist',\n\n      playlistTracks: []\n    }\n\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.changePlaylistName = this.changePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n\n  }\n\n  addTrack(track) {\n    let isInPlaylistTracks = false;\n\n    this.state.playlistTracks.forEach(trackObj => {\n      if (trackObj.id === track.id) isInPlaylistTracks = true;\n    });\n\n\n    if (!isInPlaylistTracks) {\n      this.setState({ playlistTracks: [...this.state.playlistTracks, track] });\n      isInPlaylistTracks = false;\n    }\n  }\n\n  removeTrack(track) {\n    let newObjArray = this.state.playlistTracks.filter(trackObj => trackObj.id !== track.id);\n    this.setState({ playlistTracks: newObjArray });\n  }\n\n  changePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs)\n    .then(resolvedPromise => {\n      alert('Playlist creata, controlla Spotify!')\n      this.setState( {playlistName: 'My new Playlist', playlistTracks: [] }) \n    });\n  }\n\n  search(searchTerm) {\n    if(searchTerm) {\n      Spotify.search(searchTerm).then(value => {\n        this.setState({ searchResults: value })\n      });\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <h1>Rob è proprio<span className=\"highlight\"> frocio</span></h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist\n              playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack} onChange={this.changePlaylistName} onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}