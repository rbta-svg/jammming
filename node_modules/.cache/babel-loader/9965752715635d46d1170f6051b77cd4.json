{"ast":null,"code":"var accessToken;var clientID='6fcae6e681ed465d9b593ad989a8b758';var redirectURI='http://robert-is-hella-gay.surge.sh';var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}else{var urlInBrowser=window.location.href;var accessTokenMatch=urlInBrowser.match(/access_token=([^&]*)/);var expiresInMatch=urlInBrowser.match(/expires_in=([^&]*)/);var expiresIn;if(accessTokenMatch){accessToken=accessTokenMatch[1];expiresIn=expiresInMatch[1];window.setTimeout(function(){return accessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');console.log('Auth token successfully captured!');return accessToken;}else{window.location=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientID,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);console.log('Redirecting to Spotify auth screen');}}},search:function search(searchTerm){return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(searchTerm),{headers:{'Authorization':\"Bearer \".concat(this.getAccessToken())}}).then(function(response){if(response.ok){console.log('Successfully got a response for the track fetching');return response.json();}else{throw new Error('Something has gone wrong while fetching the tracks');}}).then(function(responseJson){return responseJson.tracks.items.map(function(track){var fetchedTrackObj={id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};return fetchedTrackObj;});});},savePlaylist:function savePlaylist(playlistName,playlistURIs){var _this=this;if(playlistURIs&&playlistName){var accessTokenVar;if(accessToken){accessTokenVar=accessToken;}else{this.getAccessToken();accessTokenVar=accessToken;}var userID;return fetch('https://api.spotify.com/v1/me',{headers:{'Authorization':\"Bearer \".concat(this.getAccessToken())}}).then(function(response){return response.json();}).then(function(responseJson){userID=responseJson.id;console.log(\"Fetched UserID: \".concat(userID));}).then(function(){return fetch(\"https://api.spotify.com/v1/users/\".concat(userID,\"/playlists\"),{method:'POST',headers:{'Authorization':\"Bearer \".concat(_this.getAccessToken()),'Content-Type':'application/json'},body:JSON.stringify({name:playlistName})});}).then(function(playlistResponse){return playlistResponse.json();}).then(function(playlistResponseJson){fetch(\"https://api.spotify.com/v1/playlists/\".concat(playlistResponseJson.id,\"/tracks\"),{method:'POST',headers:{'Authorization':\"Bearer \".concat(_this.getAccessToken()),'Content-Type':'application/json'},body:JSON.stringify({uris:playlistURIs})});});}else{alert('Missing playlist name or playlist is empty.');}}};export default Spotify;","map":{"version":3,"sources":["/Users/roberttiu/Progetti/jammming/src/util/Spotify/Spotify.js"],"names":["accessToken","clientID","redirectURI","Spotify","getAccessToken","urlInBrowser","window","location","href","accessTokenMatch","match","expiresInMatch","expiresIn","setTimeout","history","pushState","console","log","search","searchTerm","fetch","headers","then","response","ok","json","Error","responseJson","tracks","items","map","track","fetchedTrackObj","id","name","artist","artists","album","uri","savePlaylist","playlistName","playlistURIs","accessTokenVar","userID","method","body","JSON","stringify","playlistResponse","playlistResponseJson","uris","alert"],"mappings":"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","sourcesContent":["let accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://robert-is-hella-gay.surge.sh'\n\nlet Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        else {\n            let urlInBrowser = window.location.href;\n            let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n            let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n            let expiresIn;\n\n            if (accessTokenMatch) {\n                accessToken = accessTokenMatch[1];\n                expiresIn = expiresInMatch[1];\n\n                window.setTimeout(() => accessToken = '', expiresIn * 1000);\n                window.history.pushState('Access Token', null, '/');\n\n                console.log('Auth token successfully captured!')\n                return accessToken;\n            }\n\n            else {\n                window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n                console.log('Redirecting to Spotify auth screen');\n            }\n        }\n    },\n\n    search(searchTerm) {\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n            {\n                headers: { 'Authorization': `Bearer ${this.getAccessToken()}` }\n            })\n            .then(response => {\n\n                if (response.ok) {\n                    console.log('Successfully got a response for the track fetching')\n                    return response.json();\n                }\n                else {\n                    throw (new Error('Something has gone wrong while fetching the tracks'));\n                }\n            })\n            .then(responseJson => {\n        \n                return responseJson.tracks.items.map(track => {\n\n                    let fetchedTrackObj = {\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        uri: track.uri\n                    }\n                    return fetchedTrackObj;\n                })\n            })\n    },\n\n    savePlaylist(playlistName, playlistURIs) {\n\n        if (playlistURIs && playlistName) {\n            let accessTokenVar;\n            if (accessToken) {\n                accessTokenVar = accessToken\n            } else {\n                this.getAccessToken();\n                accessTokenVar = accessToken;\n            }\n            let userID;\n\n            return fetch('https://api.spotify.com/v1/me',\n                {\n                    headers: { 'Authorization': `Bearer ${this.getAccessToken()}` }\n                })\n                \n                .then(response => {\n                    return response.json();\n                })\n                \n                .then(responseJson => {\n                    userID = responseJson.id;\n                    console.log(`Fetched UserID: ${userID}`);\n                })\n                \n                .then( () => {\n                return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${this.getAccessToken()}`,\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        name: playlistName\n\n                    }),\n                })})\n\n                .then(playlistResponse => {\n                    return playlistResponse.json();\n                })\n\n                .then(playlistResponseJson => {\n                    \n                    fetch(`https://api.spotify.com/v1/playlists/${playlistResponseJson.id}/tracks`,\n                        {\n                            method: 'POST',\n                            headers: {\n                                'Authorization': `Bearer ${this.getAccessToken()}`,\n                                'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify({\n                                uris: playlistURIs,\n                            })\n                        })\n                })\n\n        } \n\n        else {\n            alert('Missing playlist name or playlist is empty.');\n        }\n    }\n}\n\nexport default Spotify;\n\n"]},"metadata":{},"sourceType":"module"}