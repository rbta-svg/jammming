{"ast":null,"code":"import SearchResults from \"../../components/SearchResults/SearchResults\";\nlet accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://localhost:3000';\nlet Spotify = {\n  getAccessToken() {\n    if (accessToken) return accessToken;else {\n      let urlInBrowser = window.location.href;\n      let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n      let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n      let expiresIn;\n\n      if (accessTokenMatch) {\n        let accessToken = accessTokenMatch[1];\n        expiresIn = expiresInMatch[1];\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        alert('Auth token successfully captured!');\n        return accessToken;\n      } else {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n        alert('Redirecting to Spotify auth screen');\n      }\n    }\n  },\n\n  search(searchTerm) {\n    let accessTokenVar = this.getAccessToken();\n    console.log(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n      headers: {\n        'Authorization': `Bearer ${accessTokenVar}`\n      }\n    }).then(response => {\n      console.log(response);\n      alert('Somethings here? ' + response.ok);\n\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something has gone wrong');\n      }\n    }).then(responseJson => {\n      alert(responseJson);\n      responseJson.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n\n  savePlaylist(playlistName, playlistURIs) {\n    if (playlistURIs && playlistName) {\n      let accessTokenVar = this.getAccessToken; // se dà problemi, cambiare con accessToken diretto\n\n      let headers = {\n        'Authorization': `Bearer: ${accessTokenVar}`\n      };\n      let userID;\n      fetch('https://cors-anywhere.herokuapp.com/https://api.spotify.com/v1/me', {\n        headers: headers\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          alert('error!');\n        }\n      }).then(responseJson => {\n        userID = responseJson.id;\n        fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer: ${accessTokenVar}`,\n            'Content-Type': 'application/json'\n          },\n          body: {\n            'name': playlistName\n          }\n        });\n      }).then(playlistResponse => {\n        if (playlistResponse.ok) {\n          return playlistResponse.json();\n        } else {\n          alert('error after playlist creation');\n        }\n      }).then(playlistResponseJson => {\n        fetch(`https://cors-anywhere.herokuapp.com/https://api.spotify.com/v1/users/${userID}/playlists/${playlistResponseJson.id}/tracks`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer: ${accessTokenVar}`,\n            'Content-Type': 'application/json'\n          },\n          body: {\n            'uris': playlistURIs\n          }\n        });\n      });\n    } else return undefined;\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/roberttiu/Progetti/jammming/src/util/Spotify/Spotify.js"],"names":["SearchResults","accessToken","clientID","redirectURI","Spotify","getAccessToken","urlInBrowser","window","location","href","accessTokenMatch","match","expiresInMatch","expiresIn","setTimeout","history","pushState","alert","search","searchTerm","accessTokenVar","console","log","fetch","headers","then","response","ok","json","Error","responseJson","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","playlistURIs","userID","method","body","playlistResponse","playlistResponseJson","undefined"],"mappings":"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","sourcesContent":["import SearchResults from \"../../components/SearchResults/SearchResults\";\n\nlet accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://localhost:3000'\nlet Spotify = {\n    getAccessToken() {\n        if(accessToken) return accessToken;\n        else {\n            let urlInBrowser = window.location.href;\n            let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n            let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n            let expiresIn;\n            if(accessTokenMatch) {\n                let accessToken = accessTokenMatch[1];\n                expiresIn = expiresInMatch[1];\n                window.setTimeout( () => accessToken = '', expiresIn * 1000);\n                window.history.pushState('Access Token', null, '/');\n                alert('Auth token successfully captured!')\n                return accessToken;\n            }\n            else {\n                window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n                alert('Redirecting to Spotify auth screen');\n            }\n\n            \n        }\n    },\n\n    search(searchTerm) {\n        let accessTokenVar = this.getAccessToken();\n        console.log(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`);\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, \n        {\n            headers: { 'Authorization': `Bearer ${accessTokenVar}`}\n        }).then(response => {\n            console.log(response);\n            alert('Somethings here? ' + response.ok)\n            if(response.ok) {\n\n                return response.json();\n            }\n            else {\n                throw(new Error('Something has gone wrong'));\n            }\n        }).then(responseJson => {\n            alert(responseJson);\n            responseJson.map(track => {\n                return {\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }\n\n            })\n        })\n    },\n\n    savePlaylist(playlistName, playlistURIs) {\n        if(playlistURIs && playlistName) {\n            let accessTokenVar = this.getAccessToken; // se dà problemi, cambiare con accessToken diretto\n            let headers = { 'Authorization': `Bearer: ${accessTokenVar}` };\n            let userID;\n            fetch('https://cors-anywhere.herokuapp.com/https://api.spotify.com/v1/me', { headers: headers } )\n                .then(response => {\n                    if(response.ok) {\n                        return response.json();\n                    }\n                    else {\n                        alert('error!');\n                    }\n                })\n                .then(responseJson => {\n                    userID = responseJson.id;\n                    fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n                    {\n                        method: 'POST',\n                        headers: {\n                            'Authorization': `Bearer: ${accessTokenVar}`,\n                            'Content-Type': 'application/json',\n                        },\n                        body: {\n                            'name': playlistName,\n                        }\n                    })\n                })\n                .then(playlistResponse => {\n                    if(playlistResponse.ok) {\n                        return playlistResponse.json();\n                    }\n                    else {\n                        alert('error after playlist creation');\n                    }\n                })\n                .then(playlistResponseJson => {\n                    fetch(`https://cors-anywhere.herokuapp.com/https://api.spotify.com/v1/users/${userID}/playlists/${playlistResponseJson.id}/tracks`, \n                    {\n                        method: 'POST',\n                        headers: {\n                             'Authorization': `Bearer: ${accessTokenVar}` ,\n                             'Content-Type': 'application/json',\n                            },\n                        body: {\n                            'uris': playlistURIs,\n                        }\n                    })\n                })\n\n        } else return undefined;\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}