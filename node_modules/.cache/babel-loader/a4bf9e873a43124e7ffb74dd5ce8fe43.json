{"ast":null,"code":"import SearchResults from \"../../components/SearchResults/SearchResults\";\nlet accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://localhost:3000';\nlet Spotify = {\n  getAccessToken() {\n    if (accessToken) return accessToken;else {\n      let urlInBrowser = window.location.href;\n      let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n      let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n      let expiresIn;\n\n      if (accessTokenMatch) {\n        let accessToken = accessTokenMatch[1];\n        expiresIn = expiresInMatch[1];\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        return accessToken;\n      } else {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n        alert('Spotify auth successful!');\n      }\n    }\n  },\n\n  search(searchTerm) {\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n      headers: `Bearer ${accessToken}`\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something has done wrong');\n      }\n    }).then(responseJson => {\n      jsonReponse.map(track => {});\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/roberttiu/Progetti/jammming/src/util/Spotify/Spotify.js"],"names":["SearchResults","accessToken","clientID","redirectURI","Spotify","getAccessToken","urlInBrowser","window","location","href","accessTokenMatch","match","expiresInMatch","expiresIn","setTimeout","history","pushState","alert","search","searchTerm","fetch","headers","then","response","ok","json","Error","responseJson","jsonReponse","map","track"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,8CAA1B;AAEA,IAAIC,WAAJ;AACA,MAAMC,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,uBAApB;AACA,IAAIC,OAAO,GAAG;AACVC,EAAAA,cAAc,GAAG;AACb,QAAGJ,WAAH,EAAgB,OAAOA,WAAP,CAAhB,KACK;AACD,UAAIK,YAAY,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAnC;AACA,UAAIC,gBAAgB,GAAGJ,YAAY,CAACK,KAAb,CAAmB,sBAAnB,CAAvB;AACA,UAAIC,cAAc,GAAGN,YAAY,CAACK,KAAb,CAAmB,oBAAnB,CAArB;AACA,UAAIE,SAAJ;;AACA,UAAGH,gBAAH,EAAqB;AACjB,YAAIT,WAAW,GAAGS,gBAAgB,CAAC,CAAD,CAAlC;AACAG,QAAAA,SAAS,GAAGD,cAAc,CAAC,CAAD,CAA1B;AACAL,QAAAA,MAAM,CAACO,UAAP,CAAmB,MAAMb,WAAW,GAAG,EAAvC,EAA2CY,SAAS,GAAG,IAAvD;AACAN,QAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,eAAOf,WAAP;AACH,OAND,MAOK;AACDM,QAAAA,MAAM,CAACC,QAAP,GAAmB,oDAAmDN,QAAS,kEAAiEC,WAAY,EAA5J;AACAc,QAAAA,KAAK,CAAC,0BAAD,CAAL;AACH;AAGJ;AACJ,GAtBS;;AAwBVC,EAAAA,MAAM,CAACC,UAAD,EAAa;AACf,WAAOC,KAAK,CAAE,kDAAiDD,UAAW,EAA9D,EACZ;AACIE,MAAAA,OAAO,EAAG,UAASpB,WAAY;AADnC,KADY,CAAL,CAGJqB,IAHI,CAGCC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,EAAZ,EAAgB;AACZ,eAAOD,QAAQ,CAACE,IAAT,EAAP;AACH,OAFD,MAGK;AACD,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACH;AACJ,KAVM,EAUJJ,IAVI,CAUCK,YAAY,IAAI;AACpBC,MAAAA,WAAW,CAACC,GAAZ,CAAgBC,KAAK,IAAI,CAExB,CAFD;AAGH,KAdM,CAAP;AAeH;;AAxCS,CAAd;AA2CA,eAAe1B,OAAf","sourcesContent":["import SearchResults from \"../../components/SearchResults/SearchResults\";\n\nlet accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://localhost:3000'\nlet Spotify = {\n    getAccessToken() {\n        if(accessToken) return accessToken;\n        else {\n            let urlInBrowser = window.location.href;\n            let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n            let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n            let expiresIn;\n            if(accessTokenMatch) {\n                let accessToken = accessTokenMatch[1];\n                expiresIn = expiresInMatch[1];\n                window.setTimeout( () => accessToken = '', expiresIn * 1000);\n                window.history.pushState('Access Token', null, '/');\n                return accessToken;\n            }\n            else {\n                window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n                alert('Spotify auth successful!');\n            }\n\n            \n        }\n    },\n\n    search(searchTerm) {\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, \n        {\n            headers: `Bearer ${accessToken}`\n        }).then(response => {\n            if(response.ok) {\n                return response.json();\n            }\n            else {\n                throw(new Error('Something has done wrong'));\n            }\n        }).then(responseJson => {\n            jsonReponse.map(track => {\n\n            })\n        })\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}