{"ast":null,"code":"let accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://localhost:3000';\nlet Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      let urlInBrowser = window.location.href;\n      let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n      let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n      let expiresIn;\n\n      if (accessTokenMatch) {\n        accessToken = accessTokenMatch[1];\n        expiresIn = expiresInMatch[1];\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        console.log('Auth token successfully captured!');\n        return accessToken;\n      } else {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n        console.log('Redirecting to Spotify auth screen');\n      }\n    }\n  },\n\n  search(searchTerm) {\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n      headers: {\n        'Authorization': `Bearer ${this.getAccessToken()}`\n      }\n    }).then(response => {\n      if (response.ok) {\n        console.log('Successfully got a response for the tracks');\n        return response.json();\n      } else {\n        throw new Error('Something has gone wrong while fetching the tracks');\n      }\n    }).then(responseJson => {\n      console.log('Fetching the response JSON');\n      console.log(responseJson);\n      return responseJson.tracks.items.map(track => {\n        let obj = {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n        return obj;\n      });\n    });\n  },\n\n  savePlaylist(playlistName, playlistURIs) {\n    if (playlistURIs && playlistName) {\n      let accessTokenVar;\n\n      if (accessToken) {\n        console.log('ive gotten my from the if');\n        accessTokenVar = accessToken;\n      } else {\n        this.getAccessToken();\n        accessTokenVar = accessToken;\n      }\n\n      alert(accessTokenVar); // let headers = { 'Authorization': `Bearer: ${accessTokenVar}` };\n\n      let userID;\n      fetch('https://api.spotify.com/v1/me', {\n        headers: {\n          'Authorization': `Bearer ${this.getAccessToken()}`\n        }\n      }).then(response => {\n        alert('the response from the playlist creation was ' + response.ok);\n        /*                     if(response.ok) {\n                                return response.json();\n                            }\n                            else {\n                                throw Error('Error while POSTing the playlist creation!'); \n                            } */\n\n        return response.json();\n      }).then(responseJson => {\n        userID = responseJson.id;\n        /*                     console.log('SOMETHING HERE BEFORE');\n                            console.log(userID); */\n      });\n      console.log(`I have assigned this userid ${userID}`);\n      fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.getAccessToken()}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: playlistName\n        })\n      }).then(playlistResponse => {\n        console.log('the playlist response obj was' + playlistResponse.ok);\n        return playlistResponse.json();\n        /*                     console.log('Mi spieghi che cazzo restituisci');\n        console.log(playlistResponse); */\n\n        /*                     console.log('Here');\n                            console.log(playlistResponse);\n                            alert('playlistResponse is ' + playlistResponse);\n        \n                            if(playlistResponse.ok) {\n                                return playlistResponse.json();\n                            }\n                            else {\n                                throw(Error('Error while fetching playlist creation response.'));\n                            } */\n      }).then(playlistResponseJson => {\n        console.log('Sono arrivato fino a qui');\n        console.log(playlistResponseJson.name);\n        fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistResponseJson.id}/tracks`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.getAccessToken()}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            uris: playlistURIs\n          })\n        });\n      });\n    } else return undefined;\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/roberttiu/Progetti/jammming/src/util/Spotify/Spotify.js"],"names":["accessToken","clientID","redirectURI","Spotify","getAccessToken","urlInBrowser","window","location","href","accessTokenMatch","match","expiresInMatch","expiresIn","setTimeout","history","pushState","console","log","search","searchTerm","fetch","headers","then","response","ok","json","Error","responseJson","tracks","items","map","track","obj","id","name","artist","artists","album","uri","savePlaylist","playlistName","playlistURIs","accessTokenVar","alert","userID","method","body","JSON","stringify","playlistResponse","playlistResponseJson","uris","undefined"],"mappings":"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","sourcesContent":["\n\nlet accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://localhost:3000'\nlet Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        else {\n            let urlInBrowser = window.location.href;\n            let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n            let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n            let expiresIn;\n            if (accessTokenMatch) {\n                accessToken = accessTokenMatch[1];\n                expiresIn = expiresInMatch[1];\n                window.setTimeout(() => accessToken = '', expiresIn * 1000);\n                window.history.pushState('Access Token', null, '/');\n                console.log('Auth token successfully captured!')\n                return accessToken;\n            }\n            else {\n                window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n                console.log('Redirecting to Spotify auth screen');\n            }\n\n\n        }\n    },\n\n    search(searchTerm) {\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n            {\n                headers: { 'Authorization': `Bearer ${this.getAccessToken()}` }\n            }).then(response => {\n                if (response.ok) {\n                    console.log('Successfully got a response for the tracks')\n                    return response.json();\n                }\n                else {\n                    throw (new Error('Something has gone wrong while fetching the tracks'));\n                }\n            }).then(responseJson => {\n                console.log('Fetching the response JSON');\n                console.log(responseJson);\n                return responseJson.tracks.items.map(track => {\n                    let obj = {\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        uri: track.uri\n                    }\n                    return obj;\n                })\n            })\n    },\n\n    savePlaylist(playlistName, playlistURIs) {\n        if (playlistURIs && playlistName) {\n            let accessTokenVar;\n            if (accessToken) {\n                console.log('ive gotten my from the if')\n                accessTokenVar = accessToken\n            } else {\n                this.getAccessToken();\n                accessTokenVar = accessToken;\n            }\n            alert(accessTokenVar);\n            // let headers = { 'Authorization': `Bearer: ${accessTokenVar}` };\n            let userID;\n            fetch('https://api.spotify.com/v1/me',\n                {\n                    headers: { 'Authorization': `Bearer ${this.getAccessToken()}` }\n                })\n                .then(response => {\n                    alert('the response from the playlist creation was ' + response.ok);\n                    /*                     if(response.ok) {\n                                            return response.json();\n                                        }\n                                        else {\n                                            throw Error('Error while POSTing the playlist creation!'); \n                                        } */\n                    return response.json();\n                })\n                .then(responseJson => {\n                    userID = responseJson.id;\n                    /*                     console.log('SOMETHING HERE BEFORE');\n                                        console.log(userID); */\n                });\n            console.log(`I have assigned this userid ${userID}`)\n            fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${this.getAccessToken()}`,\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        name: playlistName\n\n                    }),\n                })\n                .then(playlistResponse => {\n                    console.log('the playlist response obj was' + playlistResponse.ok);\n                    return playlistResponse.json();\n                    /*                     console.log('Mi spieghi che cazzo restituisci');\n                    console.log(playlistResponse); */\n                    /*                     console.log('Here');\n                                        console.log(playlistResponse);\n                                        alert('playlistResponse is ' + playlistResponse);\n                    \n                                        if(playlistResponse.ok) {\n                                            return playlistResponse.json();\n                                        }\n                                        else {\n                                            throw(Error('Error while fetching playlist creation response.'));\n                                        } */\n\n                })\n                .then(playlistResponseJson => {\n                    console.log('Sono arrivato fino a qui');\n                    console.log(playlistResponseJson.name)\n                    fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistResponseJson.id}/tracks`,\n                        {\n                            method: 'POST',\n                            headers: {\n                                'Authorization': `Bearer ${this.getAccessToken()}`,\n                                'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify({\n                                uris: playlistURIs,\n                            })\n                        })\n                })\n\n        } else return undefined;\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}