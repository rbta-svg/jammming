{"ast":null,"code":"let accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://robert-is-hella-gay.surge.sh';\nlet Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      let urlInBrowser = window.location.href;\n      let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n      let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n      let expiresIn;\n\n      if (accessTokenMatch) {\n        accessToken = accessTokenMatch[1];\n        expiresIn = expiresInMatch[1];\n        window.setTimeout(() => accessToken = '', expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        console.log('Auth token successfully captured!');\n        return accessToken;\n      } else {\n        window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n        console.log('Redirecting to Spotify auth screen');\n      }\n    }\n  },\n\n  search(searchTerm) {\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n      headers: {\n        'Authorization': `Bearer ${this.getAccessToken()}`\n      }\n    }).then(response => {\n      if (response.ok) {\n        console.log('Successfully got a response for the track fetching');\n        return response.json();\n      } else {\n        throw new Error('Something has gone wrong while fetching the tracks');\n      }\n    }).then(responseJson => {\n      return responseJson.tracks.items.map(track => {\n        let fetchedTrackObj = {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n        return fetchedTrackObj;\n      });\n    });\n  },\n\n  savePlaylist(playlistName, playlistURIs) {\n    if (playlistURIs && playlistName) {\n      let accessTokenVar;\n\n      if (accessToken) {\n        accessTokenVar = accessToken;\n      } else {\n        this.getAccessToken();\n        accessTokenVar = accessToken;\n      }\n\n      let userID;\n      return fetch('https://api.spotify.com/v1/me', {\n        headers: {\n          'Authorization': `Bearer ${this.getAccessToken()}`\n        }\n      }).then(response => {\n        return response.json();\n      }).then(responseJson => {\n        userID = responseJson.id;\n        console.log(`Fetched UserID: ${userID}`);\n      }).then(() => {\n        return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.getAccessToken()}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: playlistName\n          })\n        });\n      }).then(playlistResponse => {\n        return playlistResponse.json();\n      }).then(playlistResponseJson => {\n        fetch(`https://api.spotify.com/v1/playlists/${playlistResponseJson.id}/tracks`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${this.getAccessToken()}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            uris: playlistURIs\n          })\n        });\n      });\n    } else {\n      alert('Missing playlist name or playlist is empty.');\n    }\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/roberttiu/Progetti/jammming/src/util/Spotify/Spotify.js"],"names":["accessToken","clientID","redirectURI","Spotify","getAccessToken","urlInBrowser","window","location","href","accessTokenMatch","match","expiresInMatch","expiresIn","setTimeout","history","pushState","console","log","search","searchTerm","fetch","headers","then","response","ok","json","Error","responseJson","tracks","items","map","track","fetchedTrackObj","id","name","artist","artists","album","uri","savePlaylist","playlistName","playlistURIs","accessTokenVar","userID","method","body","JSON","stringify","playlistResponse","playlistResponseJson","uris","alert"],"mappings":"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","sourcesContent":["let accessToken;\nconst clientID = '6fcae6e681ed465d9b593ad989a8b758';\nconst redirectURI = 'http://robert-is-hella-gay.surge.sh'\n\nlet Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        else {\n            let urlInBrowser = window.location.href;\n            let accessTokenMatch = urlInBrowser.match(/access_token=([^&]*)/);\n            let expiresInMatch = urlInBrowser.match(/expires_in=([^&]*)/);\n            let expiresIn;\n\n            if (accessTokenMatch) {\n                accessToken = accessTokenMatch[1];\n                expiresIn = expiresInMatch[1];\n\n                window.setTimeout(() => accessToken = '', expiresIn * 1000);\n                window.history.pushState('Access Token', null, '/');\n\n                console.log('Auth token successfully captured!')\n                return accessToken;\n            }\n\n            else {\n                window.location = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n                console.log('Redirecting to Spotify auth screen');\n            }\n        }\n    },\n\n    search(searchTerm) {\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`,\n            {\n                headers: { 'Authorization': `Bearer ${this.getAccessToken()}` }\n            })\n            .then(response => {\n\n                if (response.ok) {\n                    console.log('Successfully got a response for the track fetching')\n                    return response.json();\n                }\n                else {\n                    throw (new Error('Something has gone wrong while fetching the tracks'));\n                }\n            })\n            .then(responseJson => {\n        \n                return responseJson.tracks.items.map(track => {\n\n                    let fetchedTrackObj = {\n                        id: track.id,\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        uri: track.uri\n                    }\n                    return fetchedTrackObj;\n                })\n            })\n    },\n\n    savePlaylist(playlistName, playlistURIs) {\n\n        if (playlistURIs && playlistName) {\n            let accessTokenVar;\n            if (accessToken) {\n                accessTokenVar = accessToken\n            } else {\n                this.getAccessToken();\n                accessTokenVar = accessToken;\n            }\n            let userID;\n\n            return fetch('https://api.spotify.com/v1/me',\n                {\n                    headers: { 'Authorization': `Bearer ${this.getAccessToken()}` }\n                })\n                \n                .then(response => {\n                    return response.json();\n                })\n                \n                .then(responseJson => {\n                    userID = responseJson.id;\n                    console.log(`Fetched UserID: ${userID}`);\n                })\n                \n                .then( () => {\n                return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${this.getAccessToken()}`,\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        name: playlistName\n\n                    }),\n                })})\n\n                .then(playlistResponse => {\n                    return playlistResponse.json();\n                })\n\n                .then(playlistResponseJson => {\n                    \n                    fetch(`https://api.spotify.com/v1/playlists/${playlistResponseJson.id}/tracks`,\n                        {\n                            method: 'POST',\n                            headers: {\n                                'Authorization': `Bearer ${this.getAccessToken()}`,\n                                'Content-Type': 'application/json',\n                            },\n                            body: JSON.stringify({\n                                uris: playlistURIs,\n                            })\n                        })\n                })\n\n        } \n\n        else {\n            alert('Missing playlist name or playlist is empty.');\n        }\n    }\n}\n\nexport default Spotify;\n\n"]},"metadata":{},"sourceType":"module"}